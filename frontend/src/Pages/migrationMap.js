import React, { useEffect, useState } from "react";
import L from "leaflet";
import "leaflet/dist/leaflet.css";
import "leaflet-arrowheads";
import "leaflet-polylinedecorator";
import "leaflet-curve";

const FamilyMigrationMap = () => {
  const [map, setMap] = useState(null);
  const [progress, setProgress] = useState({ current: 0, total: 0 }); // State to track progress

  useEffect(() => {
    const initMap = L.map("map").setView([20, 0], 2);
    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "&copy; OpenStreetMap contributors",
    }).addTo(initMap);
    // Create a custom control for the info button
    const infoControl = L.control({ position: "topright" });

    infoControl.onAdd = function () {
      const div = L.DomUtil.create("div", "info-button");
      div.innerHTML = "ℹ️"; // Unicode info symbol
      div.style.cursor = "pointer";
      div.style.fontSize = "24px";
      div.style.background = "white";
      div.style.padding = "5px 10px";
      div.style.borderRadius = "5px";
      div.style.boxShadow = "0 0 10px rgba(0,0,,0,,0,.3)";

      // Prevent clicks from propagating to the map
      L.DomEvent.on(div, "click", function (e) {
        L.DomEvent.stopPropagation(e);
        L.popup()
          .setLatLng(initMap.getCenter()) // Show popup at center of map
          .setContent(
            `<div style="width: 500px;">
            <h3>Migration Map Info</h3>
            <p>This map displays migration paths of your ancestors based on birthplaces.</p>
            <p>Click on the migration lines to view ancestor details.</p>
            <p>Different colors represent different generations:</p>
            <ul>
              <li><span style="color:blue;">Blue</span> - Greatx5 Grandparents and below, these ancestors constitute >1% of your ancestry</li>
              <li><span style="color:green;">Green</span> - Greatx5 Grandparents and above, these ancestors constitude <1% of your ancestry</li>
              <li><span style="color:black;">Black</span> - Greatx15 Grandparents and above, these ancestors constitude < 0.000762939453125% of your ancestry</li>
            </ul>

            <h2>Valid Placenames</h2>
            <p>To check if the places of birth that you entered returns the desired place, and not another place of the same name, enter the place after the equals sign in this link and paste the link in your browser and check the first result: https://nominatim.openstreetmap.org/search?format=json&q=</p>.
            If you want the map to choose one specific place which shares a name with other places, use the full name listed as "display name" when pasting the link in the browser and assign it as the ancestor's birth place.
          </div>`
          )
          .openOn(initMap);
      });

      return div;
    };

    infoControl.addTo(initMap);
    setMap(initMap);
  }, []);

  useEffect(() => {
    if (!map) return;

    const migrationLayer = L.layerGroup().addTo(map); //layer for migration path of everyone in the tree
    const anfExpansionLayer = L.layerGroup().addTo(map); //layer for Anatolian Neolithic Farmer migrations

    const fetchParentChildBirths = async () => {
      const userId = localStorage.getItem("userId");
      const response = await fetch(
        "https://cleirigh-backend.vercel.app/api/migration-map",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId }),
        }
      );
      const data = await response.json();
      console.log(data);
      return data;
    };

    const geocodeLocation = async (place) => {
      if (place) {
        if (place === "Scandinavia") {
          place = "Norway";
        }

        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
          place
        )}`;

        const response = await fetch(url);
        const data = await response.json();
        return data.length > 0
          ? [parseFloat(data[0].lat), parseFloat(data[0].lon)]
          : null;
      } else {
        return null;
      }
    };

    //determines a line's opactiy based on the ancestor's relation to the user: more distant = more opaque
    const getOpacity = (relationLevel) => {
      return Math.max(100 - relationLevel, 10) / 100;
    };

    const plotParentChildMigrations = async () => {
      const migrations = await fetchParentChildBirths();
      if (!migrations || migrations.length === 0) {
        console.log("No migration data available.");
        return;
      }

      setProgress({ current: 0, total: migrations.length });

      let ancestorBirthplaces = new Map(); // Track most recent ancestor's valid POB

      for (let index = 0; index < migrations.length; index++) {
        const migration = migrations[index];

        // Check if the parent's birthplace is NULL
        let parentBirthplace = migration.parent_birth || null;
        if (!parentBirthplace && migration.parent_id) {
          parentBirthplace =
            ancestorBirthplaces.get(migration.parent_id) || null;
        }

        // Store parent birthplace in ancestor map (if valid)
        if (parentBirthplace && migration.parent_id) {
          ancestorBirthplaces.set(migration.parent_id, parentBirthplace);
        }

        // Check if the child's birthplace is NULL
        let childBirthplace = migration.child_birth || null;
        if (!childBirthplace && migration.child_id) {
          childBirthplace =
            ancestorBirthplaces.get(migration.child_id) || parentBirthplace;
        }

        // Store child's birthplace in ancestor map (if valid)
        if (childBirthplace && migration.child_id) {
          ancestorBirthplaces.set(migration.child_id, childBirthplace);
        }

        // Get coordinates
        const parentCoords = await geocodeLocation(parentBirthplace);
        const childCoords = await geocodeLocation(childBirthplace);

        //console.log(`${parentBirthplace} > ${childBirthplace}`);

        let relation = migration.relation_to_user[0];
        let unchangedRelation = relation;
        if (relation < 7) {
          relation += 20;
        } else {
          relation += 50;
        }

        if (parentCoords && childCoords) {
          //loads data of parent and child to populate popups
          const polylineDataMap = new Map(); // Store data for each polyline

          const polylineKey = `${parentCoords}-${childCoords}`;

          if (!polylineDataMap.has(polylineKey)) {
            polylineDataMap.set(polylineKey, []);
          }

          polylineDataMap.get(polylineKey).push({
            parent: {
              name: migration.parent_name,
              birth: migration.parent_birth,
              dob: migration.parent_dob,
              id: migration.parent_id,
            },
            child: {
              name: migration.child_name,
              birth: migration.child_birth,
              dob: migration.child_dob,
              id: migration.child_id,
            },
          });

          let polyline = "";
          if (unchangedRelation < 7) {
            polyline = L.polyline([parentCoords, childCoords], {
              color: "blue",
              weight: 4,
              opacity: getOpacity(relation),
            }).addTo(migrationLayer);
          } else if (unchangedRelation >= 7 && unchangedRelation <= 17) {
            polyline = L.polyline([parentCoords, childCoords], {
              color: "green",
              weight: 4,
              opacity: getOpacity(relation),
            }).addTo(migrationLayer);
          } else if (unchangedRelation > 17) {
            polyline = L.polyline([parentCoords, childCoords], {
              color: "black",
              weight: 4,
              opacity: getOpacity(relation),
            }).addTo(migrationLayer);
          }

          polyline.on("click", (e) => {
            const details = polylineDataMap
              .get(polylineKey)
              .map(
                (entry) =>
                  `<b>Parent:</b> <a class="popup_migration_link" href="./profile/${entry.parent.id}" target="_blank">${entry.parent.name} (b.${entry.parent.dob}) - ${entry.parent.birth}</a><br>
                   <b>Child:</b> <a class="popup_migration_link" href="./profile/${entry.child.id}" target="_blank">${entry.child.name} (b.${entry.child.dob}) - ${entry.child.birth}</a><br><br>`
              )
              .join("");

            L.popup()
              .setLatLng(e.latlng)
              .setContent(`<div>${details}</div>`)
              .openOn(map);
          });

          polylineDataMap.get(polylineKey).polyline = polyline;

          // Add an arrowhead to the polyline
          setTimeout(() => {
            const decorator = L.polylineDecorator(polyline, {
              patterns: [
                {
                  pixelSize: 14,
                  offset: "10%", // Start arrows 10% into the line
                  repeat: "20%", // Repeat every 20% of the line length
                  symbol: L.Symbol.arrowHead({
                    headAngle: 30,
                    pathOptions: {
                      stroke: true,
                      color: "blue",
                      opacity: getOpacity(relation + 40), // Apply opacity here
                    },
                  }),
                },
              ],
            }).addTo(migrationLayer);
          }, 100);
        }

        // Update progress
        setProgress((prevState) => ({
          current: prevState.current + 1,
          total: prevState.total,
        }));
      }
    };

    plotParentChildMigrations();

    L.control
      .layers(null, { "Migration Paths": migrationLayer }, { collapsed: false })
      .addTo(map);

    /***ANF BORDERS**************************************/

    let anfOriginCoords = [
      [38.65592378562599, 37.625977094769496],
      [38.46503850516063, 36.77157632010816],
      [37.73506145800293, 36.67393051728971],
      [36.83125364058383, 36.71818868379447],
      [36.50782304499802, 37.71361967743543],
      [36.702162420101025, 38.30370819450153],
      [37.67846419124882, 39.1812757327024],
    ];

    let nigdeCoords = [
      [38.282521647972935, 34.93112135582155],
      [38.282521647972935, 34.54969697872669],
      [38.13529661410928, 34.208422536062876],
      [37.86108941693132, 33.9139896835686],
      [37.43723359396372, 34.40248055247956],
      [37.638866719894985, 35.06495447059168],
      [38.07210904565424, 35.1920959296233],
    ];

    let southernAnatoliaCoords = [
      [38.41453325871002, 33.52394153141406],
      [38.347045897847025, 33.17957502151216],
      [38.16451572065202, 32.32726790950493],
      [37.83888683921623, 31.92263726037019],
      [37.50498472746565, 31.845154795642266],
      [37.238153549431665, 31.78489065640943],
      [36.63950272434739, 31.767672330914337],
      [36.58421853009478, 31.896809772132457],
      [36.05008575624487, 32.68885274490684],
      [36.30720375526325, 33.93718134330125],
      [36.784435012379056, 34.617305200357514],
      [37.32720270588548, 35.27160156917113],
      [37.85928097836909, 35.74510552028626],
      [37.90005235372797, 35.67623221830588],
      [38.44825331352187, 35.71927803204361],
      [38.56951511803281, 34.582868549367326],
    ];

    let anatalyaCoords = [
      [36.81862874213588, 31.27860633437128],
      [36.95880943571527, 31.3297049441794],
      [37.24889917302281, 31.34272344310054],
      [37.48457806488227, 31.26763650793056],
      [37.76107190847018, 30.85693032054667],
      [37.83350189916775, 30.53916233601901],
      [37.75783048529645, 30.01696383860413],
      [37.39004482233363, 29.72699378795706],
      [37.00881143949443, 29.67929886245489],
      [36.59699478475412, 29.84418592756568],
      [36.30964615739611, 30.22631704898586],
      [36.26462404666757, 30.4892798152122],
      [36.46243720043351, 30.55760943915834],
      [36.68983836406246, 30.56569183284663],
      [36.86774867885865, 30.69403795906551],
      [36.85955538398348, 30.89191894996338],
      [36.81862874213588, 31.27860633437128],
    ];

    let cyprusCoords = [
      [32.2695375, 35.1036718],
      [32.2752747, 35.0372811],
      [32.3044504, 34.9993868],
      [32.3064846, 34.9769055],
      [32.3049989, 34.9449341],
      [32.3222067, 34.8899247],
      [32.3647321, 34.8436638],
      [32.3959432, 34.8365381],
      [32.3904886, 34.7935179],
      [32.4155225, 34.7561578],
      [32.4703014, 34.7200078],
      [32.5380293, 34.7053561],
      [32.6230219, 34.6776222],
      [32.7091413, 34.6440626],
      [32.7641856, 34.6524914],
      [32.881914, 34.6706301],
      [32.9072943, 34.6360955],
      [32.942067, 34.5638417],
      [32.979442, 34.5665077],
      [33.0340262, 34.5642653],
      [33.0084119, 34.610428],
      [33.0302893, 34.6756257],
      [33.1502742, 34.7185126],
      [33.3109931, 34.7170957],
      [33.4346981, 34.7543853],
      [33.5351441, 34.7937316],
      [33.6077321, 34.8225535],
      [33.6376746, 34.8591789],
      [33.6432748, 34.9479237],
      [33.7042361, 34.9868791],
      [33.7850187, 34.9858629],
      [33.8833625, 34.9470605],
      [33.9392087, 34.970429],
      [34.0855379, 34.9631178],
      [34.0471141, 35.0350719],
      [33.9897031, 35.077313],
      [33.9450523, 35.1331564],
      [33.8939129, 35.2080116],
      [33.9109165, 35.2739527],
      [34.0173829, 35.3342662],
      [34.1360883, 35.4126155],
      [34.2487515, 35.4677617],
      [34.368842, 35.5299137],
      [34.4216973, 35.593516],
      [34.497412, 35.6146289],
      [34.5695677, 35.6454278],
      [34.6006052, 35.7184244],
      [34.4909992, 35.6833647],
      [34.3398665, 35.6200783],
      [34.081989, 35.5042781],
      [33.877749, 35.4238646],
      [33.7745811, 35.4174111],
      [33.6546537, 35.3634554],
      [33.4504397, 35.3434946],
      [33.1691945, 35.3606041],
      [33.0967878, 35.3462875],
      [32.9213159, 35.4040114],
      [32.9369061, 35.3055254],
      [32.9031728, 35.1906515],
      [32.8648975, 35.1574854],
      [32.7689485, 35.1745462],
      [32.669238, 35.1959802],
      [32.554472, 35.1664724],
      [32.4826568, 35.0832977],
      [32.3559883, 35.0508188],
      [32.2695375, 35.1036718],
    ];

    cyprusCoords = fixCoords(cyprusCoords);

    let westAnatoliaCoords = [
      [27.0408286, 38.8609219],
      [26.9258787, 38.8222848],
      [26.912956, 38.7616148],
      [26.7271658, 38.732023],
      [26.7434153, 38.6485847],
      [26.8167095, 38.5801663],
      [26.8582854, 38.5111261],
      [26.9563858, 38.466446],
      [27.1657934, 38.4671845],
      [27.0448167, 38.3992439],
      [26.8285765, 38.3765917],
      [26.7406605, 38.5183994],
      [26.6906272, 38.4781958],
      [26.6931167, 38.4115832],
      [26.6804352, 38.3188276],
      [26.5931308, 38.4455447],
      [26.6190531, 38.5196035],
      [26.5514943, 38.5818575],
      [26.4889372, 38.6757726],
      [26.3917729, 38.6707647],
      [26.3820101, 38.5809],
      [26.396147, 38.4668903],
      [26.4746072, 38.4173701],
      [26.3872946, 38.3224658],
      [26.2815181, 38.3824347],
      [26.2380419, 38.2588152],
      [26.4626523, 38.1800805],
      [26.5970934, 38.1177379],
      [26.6259764, 38.2023883],
      [26.76635, 38.2137518],
      [26.7794133, 38.1747878],
      [26.849545, 38.1131885],
      [26.8630876, 38.0419799],
      [26.9756639, 38.0684524],
      [27.1002801, 38.0033093],
      [27.1872124, 37.9756632],
      [27.2630229, 37.9676023],
      [27.2554837, 37.9010781],
      [27.2194249, 37.8271909],
      [27.2667874, 37.7572533],
      [27.0570986, 37.7086148],
      [27.0341661, 37.7944907],
      [26.9024968, 37.8078927],
      [26.6766633, 37.8042081],
      [26.5767547, 37.7527441],
      [26.599946, 37.6768396],
      [26.7477195, 37.7034579],
      [26.8220295, 37.6381389],
      [26.9128838, 37.6762976],
      [27.010976, 37.6590592],
      [27.1669273, 37.5768597],
      [27.2037497, 37.4862214],
      [27.2103877, 37.3646642],
      [27.3303311, 37.3370303],
      [27.4746951, 37.247761],
      [27.7148059, 37.2656542],
      [27.9742393, 37.3318642],
      [28.0753473, 37.4179721],
      [28.2468963, 37.6081918],
      [28.2933994, 37.8487689],
      [28.3105678, 38.0805693],
      [28.3332372, 38.3443041],
      [28.2505511, 38.4785889],
      [28.1946736, 38.6407355],
      [27.9467009, 38.9282904],
      [27.8087125, 39.1050151],
      [27.4784863, 39.2483474],
      [27.1847581, 39.0750173],
      [27.0408286, 38.8609219],
    ];

    westAnatoliaCoords = fixCoords(westAnatoliaCoords);

    let northwestAnatoliaCoords = [
      [26.0857072, 39.4473181],
      [26.2601943, 39.4596602],
      [26.6319243, 39.5286777],
      [26.9851537, 39.5785185],
      [26.9197273, 39.4703268],
      [26.6174493, 39.3412909],
      [26.7966242, 39.137734],
      [27.0985086, 39.227754],
      [27.6932682, 39.3623667],
      [28.4661438, 39.4508866],
      [29.2068855, 39.5578287],
      [30.2412335, 39.8247697],
      [31.1308737, 40.0279542],
      [31.7049095, 40.2871926],
      [31.9166905, 40.4982838],
      [31.9900847, 40.7311197],
      [32.0745644, 40.9598521],
      [32.1278556, 41.2278489],
      [31.9826369, 41.5538549],
      [31.4804638, 41.3307098],
      [31.3656891, 41.1461959],
      [30.9763333, 41.0853969],
      [30.5019108, 41.1600726],
      [30.1732336, 41.1675033],
      [29.6819631, 41.1706554],
      [28.764506, 41.3093846],
      [28.0592718, 41.6888824],
      [28.0488262, 41.921804],
      [27.7075372, 42.0053792],
      [27.1849086, 42.0767795],
      [26.7392446, 41.9489678],
      [26.2861039, 42.072831],
      [25.9030879, 42.4237125],
      [25.7918914, 42.5471587],
      [25.497505, 42.5648241],
      [25.0544858, 42.8279675],
      [24.4836641, 42.5595368],
      [24.0392765, 42.2423664],
      [23.6771047, 41.9307395],
      [22.9123627, 41.5718587],
      [22.5239424, 41.4015053],
      [21.8838528, 41.0004107],
      [21.673006, 40.3735627],
      [21.9027806, 39.9383604],
      [21.9376791, 39.5177322],
      [22.195849, 38.992946],
      [22.5158017, 38.6283715],
      [22.8403415, 38.2379437],
      [23.2942109, 38.1270064],
      [23.6428421, 37.9433746],
      [23.9700641, 37.672135],
      [24.0630243, 37.8730973],
      [24.0470329, 38.1809032],
      [23.6332963, 38.3805196],
      [24.0370711, 38.4047703],
      [24.2123029, 38.115892],
      [24.5618974, 37.9766896],
      [24.564093, 38.1562537],
      [24.3340877, 38.2046192],
      [24.1917231, 38.4895873],
      [23.9775514, 38.7399941],
      [23.565534, 38.8135698],
      [23.2736759, 39.0506044],
      [22.8615455, 38.8539361],
      [23.1468703, 38.8482277],
      [23.4831439, 38.6379593],
      [23.5352872, 38.4924554],
      [23.212201, 38.6527115],
      [22.6027657, 38.9075528],
      [23.0307717, 39.0289048],
      [22.8263555, 39.2200602],
      [23.0113547, 39.3278545],
      [23.1597302, 39.1427119],
      [23.3497668, 39.1798701],
      [23.2078714, 39.4249297],
      [22.9614142, 39.5743324],
      [22.9111507, 39.7191023],
      [22.6950713, 39.9484978],
      [22.5496181, 40.1577793],
      [22.6115839, 40.3819133],
      [22.8136119, 40.4921222],
      [23.0939717, 40.2854777],
      [23.3048177, 40.1719825],
      [23.3242442, 40.0470641],
      [23.4015137, 39.9508378],
      [23.7268592, 39.9023557],
      [23.6375415, 39.9934237],
      [23.4709964, 40.0627808],
      [23.3674104, 40.149738],
      [23.3579414, 40.2710125],
      [23.5189977, 40.2471958],
      [23.6753028, 40.1945714],
      [23.8230986, 40.0294002],
      [23.9461444, 39.9260165],
      [24.023992, 39.9946109],
      [23.9662715, 40.1337089],
      [23.8262936, 40.2069534],
      [23.6951191, 40.3042092],
      [23.8831279, 40.3640884],
      [24.1503448, 40.2822613],
      [24.3217808, 40.1034927],
      [24.4203239, 40.1674863],
      [24.1909094, 40.3502427],
      [23.9266661, 40.4193949],
      [23.9005925, 40.5338587],
      [23.7589394, 40.6381309],
      [23.7623826, 40.7616188],
      [24.0012913, 40.7395353],
      [24.3621349, 40.8196898],
      [24.4871748, 40.9752348],
      [24.738445, 40.8528155],
      [25.1107603, 40.9804802],
      [25.6388884, 40.848126],
      [25.9584096, 40.8058164],
      [26.0701654, 40.6408762],
      [26.3939369, 40.5788693],
      [26.7887715, 40.6445689],
      [26.7743998, 40.5567486],
      [26.232711, 40.3274041],
      [26.2654055, 40.1917517],
      [26.1686843, 40.062817],
      [26.3820051, 40.1393042],
      [26.7608823, 40.4742373],
      [27.3680471, 40.6932351],
      [27.5582214, 40.9729346],
      [27.8468207, 40.9740893],
      [28.0987469, 41.052093],
      [28.4940386, 40.9917972],
      [28.8001732, 40.9582276],
      [28.9992203, 40.9734571],
      [29.2665377, 40.8636518],
      [29.3645007, 40.6865823],
      [29.0081087, 40.6443847],
      [28.7529548, 40.5450708],
      [28.9372302, 40.4541594],
      [29.1575569, 40.4349322],
      [29.0134314, 40.3582967],
      [28.1425529, 40.3995812],
      [27.9099994, 40.3595002],
      [28.0562772, 40.4850175],
      [27.6965097, 40.5256219],
      [27.4619578, 40.5435247],
      [27.5032479, 40.4670869],
      [27.8207488, 40.3802123],
      [27.7370435, 40.3087547],
      [27.5660663, 40.3143548],
      [27.331877, 40.3787915],
      [27.2695943, 40.4749488],
      [26.9584876, 40.4015004],
      [26.7601622, 40.3993974],
      [26.3705653, 40.0673303],
      [26.1816798, 39.9698421],
      [26.1592492, 39.7283181],
      [26.0857072, 39.4473181],
    ];

    northwestAnatoliaCoords = fixCoords(northwestAnatoliaCoords);

    let nafplionCoords = [
      [23.14448545460216, 38.06172254939011, 0],
      [22.84554689949073, 38.03644549344567, 0],
      [22.87873686394086, 37.92930794649016, 0],
      [22.55442901716221, 38.10639928262282, 0],
      [22.28481099358733, 38.1875701558473, 0],
      [22.23607513653912, 38.07937901644083, 0],
      [22.23720048288685, 37.85795638420363, 0],
      [22.27415177777769, 37.77410578586606, 0],
      [22.47244621345434, 37.48588269395741, 0],
      [22.78481220409642, 37.42253803219032, 0],
      [22.76999693067576, 37.55115912153599, 0],
      [22.99267604495904, 37.49058114289438, 0],
      [23.19877256935614, 37.23720977164109, 0],
      [23.55577315011073, 37.36143568896152, 0],
      [23.5284515507187, 37.45891801093472, 0],
      [23.22907169678885, 37.62093074626739, 0],
      [23.12576460228786, 37.81393047646395, 0],
      [23.14448545460216, 38.06172254939011, 0],
    ];

    nafplionCoords = fixCoords(nafplionCoords);

    let creteCoords = [
      [23.57480389030454, 35.63823246146574, 0],
      [23.57070993640562, 35.50413103432232, 0],
      [23.53028996435632, 35.3905175021892, 0],
      [23.53637400946693, 35.2621933408789, 0],
      [23.8037300067137, 35.2406845263566, 0],
      [24.13868498888122, 35.18758271677554, 0],
      [24.39035286277707, 35.18236422278076, 0],
      [24.45565303619678, 35.15628301287595, 0],
      [24.61997726915595, 35.1009373528691, 0],
      [24.75163019491001, 35.07647644455606, 0],
      [24.73168320339287, 34.93937998420159, 0],
      [25.07572595564298, 34.94214235310969, 0],
      [25.32663989555867, 34.99093657829896, 0],
      [25.54046172555456, 34.99175286487037, 0],
      [25.7435059324769, 35.01053450878908, 0],
      [25.93875882145315, 35.03542314565349, 0],
      [26.18051568769855, 34.9860014426203, 0],
      [26.28072901696386, 35.15593797433782, 0],
      [26.26148176021942, 35.26445915852307, 0],
      [26.10438166743015, 35.20074463631166, 0],
      [25.9593336803409, 35.19409717437836, 0],
      [25.79307766929009, 35.11198739699628, 0],
      [25.71841076151704, 35.19010966718665, 0],
      [25.81309539275502, 35.36786195036973, 0],
      [25.54885194867629, 35.32684258077849, 0],
      [25.45682912984099, 35.31058275412759, 0],
      [25.36218418848149, 35.35237033664521, 0],
      [25.14707225567558, 35.35110357171114, 0],
      [25.08639723747441, 35.34761196378416, 0],
      [25.05117450365343, 35.38137059449724, 0],
      [24.94573162457877, 35.42408733787259, 0],
      [24.75967175328821, 35.42663214107716, 0],
      [24.5903429447047, 35.40073919008533, 0],
      [24.28540788378817, 35.35341782192033, 0],
      [24.25505148914242, 35.4775644193723, 0],
      [24.06961369934161, 35.50174065814925, 0],
      [24.21867494651366, 35.55337833452868, 0],
      [24.08130205870827, 35.59087030277843, 0],
      [23.93141180642636, 35.52233740106245, 0],
      [23.81147024857299, 35.52866040238994, 0],
      [23.77499734875068, 35.66080124925642, 0],
      [23.70281028607799, 35.61548457638703, 0],
      [23.71473440542795, 35.50179477728994, 0],
      [23.63356094908785, 35.52829512903983, 0],
      [23.57480389030454, 35.63823246146574, 0],
    ];

    creteCoords = fixCoords(creteCoords);

    let balkanCoords = [
      [28.14948139852832, 41.57099617467212, 0],
      [27.98629325665183, 41.88860462599096, 0],
      [27.98199401690832, 42.06819380521979, 0],
      [27.74097199292099, 42.36889186294337, 0],
      [27.46133742962887, 42.50730177628725, 0],
      [27.64687607212436, 42.61281321870617, 0],
      [27.92583464176803, 42.71696346983934, 0],
      [27.90145953458096, 43.03690494152114, 0],
      [28.02948847910242, 43.34998792582593, 0],
      [28.52836173255571, 43.38673823771049, 0],
      [28.56136083319005, 43.60459136260728, 0],
      [28.68815632175289, 43.99947980176039, 0],
      [28.6939999094757, 44.35868299160789, 0],
      [29.14274580319883, 44.70671868495629, 0],
      [29.64859442724679, 44.88218281534567, 0],
      [29.75506298643148, 45.63192165622569, 0],
      [30.44908428796445, 46.06489528308951, 0],
      [30.83476738001076, 46.64126570616134, 0],
      [30.30069190349738, 46.82839082200965, 0],
      [29.81032952659022, 47.2602479901396, 0],
      [28.71445381619724, 47.51303921222185, 0],
      [27.95378267282526, 48.36801535646163, 0],
      [25.33283191860763, 48.66688708884848, 0],
      [24.40501334613391, 48.57676839503885, 0],
      [24.21117244513151, 48.51418671163956, 0],
      [23.53140005349423, 48.41437027721211, 0],
      [22.9590781250188, 48.52924523727688, 0],
      [22.44573824010639, 48.50898518078644, 0],
      [21.67890427147705, 48.16742723745097, 0],
      [21.0248598696295, 47.77017766602995, 0],
      [20.07609272800644, 47.16495965150023, 0],
      [19.7577405954239, 46.86857974758933, 0],
      [18.73982053406711, 46.55304166734258, 0],
      [17.3704421367671, 46.09385545020423, 0],
      [17.17200280383585, 45.54826677007298, 0],
      [17.35919875048736, 45.11312326142996, 0],
      [18.02593949785451, 44.63545101312396, 0],
      [19.86621811646442, 44.35739525972859, 0],
      [20.82706136192387, 43.87610379558513, 0],
      [21.50828092886095, 43.15793155698812, 0],
      [21.71650268025806, 42.41033874138694, 0],
      [21.35331565400032, 41.47276698173305, 0],
      [20.55383719735336, 40.94789851551866, 0],
      [20.05726201606545, 39.85919732415806, 0],
      [20.57632059055005, 39.17527693140604, 0],
      [20.62314063076257, 38.58120056762861, 0],
      [20.94200566086366, 38.71552136354453, 0],
      [21.14117490972216, 38.31635930525052, 0],
      [21.59827418581632, 38.30566449398635, 0],
      [22.95219634899345, 38.2021784614812, 0],
      [22.77840437057381, 38.04660079012169, 0],
      [21.35680748612828, 38.12688352555616, 0],
      [21.19133829586508, 37.90114382328807, 0],
      [21.71115305248109, 37.36033812011674, 0],
      [21.55343409137704, 37.10560022899994, 0],
      [21.89513096619368, 36.73961167029944, 0],
      [22.19272279135131, 36.97848946179108, 0],
      [22.408722409191, 36.39968651289049, 0],
      [22.66954080616444, 36.79097956507815, 0],
      [23.02263586705991, 36.44330005787956, 0],
      [23.07036317998062, 36.85475686862007, 0],
      [22.71755641551658, 37.49858673900478, 0],
      [23.15709148272077, 37.31188665420954, 0],
      [23.48878852442069, 37.51986497186316, 0],
      [23.17403788296914, 37.9026706515692, 0],
      [23.6415475241011, 37.91460383980964, 0],
      [24.08694664552601, 37.64772493327333, 0],
      [23.80560077419323, 38.3200275537742, 0],
      [24.32353910413922, 38.01392046020869, 0],
      [24.1857092507964, 38.60925940617467, 0],
      [23.26493664755544, 39.01886274229344, 0],
      [22.93232491815188, 38.89302086937614, 0],
      [23.40331968875159, 38.74298593415646, 0],
      [23.48475359282432, 38.47937476059142, 0],
      [22.56447333239004, 38.87088159664751, 0],
      [23.01564645490047, 39.12636083182494, 0],
      [22.8211779501458, 39.29724792120943, 0],
      [23.27892207352008, 39.21398159407381, 0],
      [22.77969950499242, 39.8094639901442, 0],
      [22.56114171531322, 40.40164004119839, 0],
      [23.61182821260986, 41.15221695638025, 0],
      [27.19498134062792, 41.50130785462238, 0],
      [28.14948139852832, 41.57099617467212, 0],
    ];

    balkanCoords = fixCoords(balkanCoords);

    let albaniaCoords = [[15.51367221660519,43.92372289907807,0],[15.85700638559788,43.74034325322117,0],[15.95967136620344,43.49733672092996,0],[16.45800270640828,43.53445234468503,0],[17.34088231044605,43.05149539930974,0],[18.3431447489916,42.51313116870087,0],[18.97228072508013,42.18317217712723,0],[19.11205479436821,41.96925478865067,0],[19.5511318366235,41.82849930225677,0],[19.55273864308291,41.56510722185534,0],[19.46917851468015,41.34176243411155,0],[19.51596574475867,41.07797772214931,0],[19.32597280329028,40.63394839382929,0],[19.44006465091186,40.36958021469711,0],[19.89354526170224,39.93123149967293,0],[20.25895540710031,40.28495707414962,0],[20.60007684351036,40.56820240812604,0],[20.58338857909859,41.03746295769567,0],[20.56639056567682,41.47608046422897,0],[20.14779371506093,41.98227380556549,0],[19.84637519303142,42.38808471426149,0],[19.58710113264222,42.90405453650928,0],[19.43632548686899,43.23209930555949,0],[19.28860712312809,43.58678240267201,0],[19.18358391760424,43.6702933823025,0],[18.96471791804049,44.04510729968739,0],[18.64825819576124,44.2507738406136,0],[18.20390258537505,44.59395191543699,0],[17.45575708199678,44.7084928650416,0],[16.71939790320252,44.53815846191856,0],[15.69999329494454,44.63723409164234,0],[15.21314217085423,44.18516596584372,0],[15.51367221660519,43.92372289907807,0]]

    albaniaCoords = fixCoords(albaniaCoords)

    let southItalyCoords = [[13.37968895397429,42.7014731267758,0],[13.42427437418187,42.34482839600543,0],[13.47630017728364,41.97337942915079,0],[13.65056434816222,41.84190712373539,0],[14.28329841677917,41.74404479023041,0],[14.51815338335301,41.50348010494093,0],[14.69655537377986,41.33387406269102,0],[15.03699101999599,41.24676050543702,0],[15.42416765173424,41.07494869218187,0],[15.72238136484994,40.63703661356056,0],[15.85832603093104,40.20457561817312,0],[15.7544058405419,39.92489454285754,0],[15.94363233275607,39.53232447763087,0],[16.06093875125367,39.24509219114216,0],[16.21146405906094,38.87048393670116,0],[15.87858312615665,38.71221107257655,0],[15.90610913924367,38.54373909109241,0],[15.68329351512697,38.18277254014215,0],[15.92712554103511,37.93713069320145,0],[16.15550469897133,38.12175770413282,0],[16.43649473209843,38.30249361720588,0],[16.62865817912128,38.79783260765036,0],[17.09177592118214,38.97383311882341,0],[17.15310860446566,39.31700439308192,0],[16.89339825150833,39.56938740102328,0],[16.53963357951261,39.65177091219597,0],[16.61005292998048,40.02951420219912,0],[17.08078865882119,40.52731157299743,0],[17.29820513146421,40.32069241706626,0],[17.82607177969264,40.36510216655365,0],[18.03263436402006,39.89016371967448,0],[18.39494633527986,39.79425234975065,0],[18.51875674395425,40.21404840767595,0],[18.19634976121901,40.51027870521968,0],[17.94184073441326,40.69405047096638,0],[17.37681760002201,40.89957879221583,0],[16.41489400957951,41.33453918191158,0],[15.90730494189395,41.54329174426098,0],[16.19727265648073,41.79407288310487,0],[16.13953769230096,41.95893516560262,0],[15.53122021733222,41.90089228080008,0],[14.91871645200925,41.98026940673662,0],[14.49346738342754,42.28246744783876,0],[13.99183884596012,42.66697344989952,0],[13.8611637354224,43.05087313688204,0],[13.37968895397429,42.7014731267758,0]]

    southItalyCoords = fixCoords(southItalyCoords)

    let sicilyCoords = [[12.60850156389646,38.04671664272281,0],[12.47999701394346,37.88716964973257,0],[12.48431131206432,37.72476670802501,0],[12.64228757943995,37.6135605053651,0],[12.94666479531086,37.56128183867229,0],[13.24773671522919,37.49212374554597,0],[13.57469185917505,37.22338099549129,0],[13.76091104368323,37.1229897389539,0],[13.96537699484594,37.10985374110404,0],[14.18603521369401,37.0925789002993,0],[14.39310671713901,36.94786109711291,0],[14.49314223993487,36.80047784748852,0],[14.70344395201143,36.76378076415868,0],[14.95593239147152,36.70488253117117,0],[15.10274581999808,36.65497917821125,0],[15.14504415319777,36.82174331784266,0],[15.33952073903396,37.01130531982471,0],[15.1900425930044,37.21726109396315,0],[15.0479710270034,37.35029511366549,0],[15.15497574552048,37.61919905216364,0],[15.27337701004964,37.74027606604414,0],[15.61957669728377,38.26526424722343,0],[15.34199007717327,38.22198924017745,0],[14.98081517144448,38.14416073515495,0],[14.72113033152003,38.1609529030599,0],[14.31145986818814,38.04380938734296,0],[14.05794034069813,38.03603403263578,0],[13.68565915452353,38.00036467800449,0],[13.4946576485081,38.12619664796902,0],[13.30483292635462,38.20623073445188,0],[13.06741574967118,38.17723583020204,0],[12.60850156389646,38.04671664272281,0]]

    sicilyCoords = fixCoords(sicilyCoords);

    let darkSardiniaCoords = [[8.255070023275941,41.08349099049067,0],[8.159285938262082,40.90480531994267,0],[8.152093818675857,40.56871773284574,0],[8.38147739859047,40.45793217415184,0],[8.404474621031357,40.26410526426007,0],[9.01070393681779,40.45964073398189,0],[9.208616570326766,40.5890104098438,0],[9.290461175581273,40.7604264407743,0],[9.163891914297276,40.87620280909353,0],[8.689347895416264,40.90738300161757,0],[8.32706232089506,40.86251107292968,0],[8.255070023275941,41.08349099049067,0]]

    darkSardiniaCoords = fixCoords(darkSardiniaCoords);

    let genoaCoords = [[8.229399890975566,44.08977300771944,0],[8.343444368938925,44.18142960987448,0],[8.515369357848414,44.3138591575284,0],[8.8158130980059,44.44571177594474,0],[9.22291627137152,44.33149711720288,0],[9.634427891457431,44.12203205175873,0],[9.712317368211627,44.2562638667027,0],[9.670721883153055,44.36116435250084,0],[9.578703990188602,44.56291737680086,0],[9.450148069703237,44.67877405863744,0],[9.334860096456794,44.79991654396704,0],[9.013832389158374,44.85051168063622,0],[8.789313428421101,44.88790647069701,0],[8.368086242084358,44.84202378719865,0],[8.29422437443753,44.71291514246345,0],[8.1513752544938,44.57696270125569,0],[7.99255898600828,44.24605242014485,0],[8.229399890975566,44.08977300771944,0]]
    
    genoaCoords = fixCoords(genoaCoords)

    let niceCoords = [[7.728907014878352,43.9496849086633,0],[7.498471257195487,43.98913584078085,0],[7.316465892413115,43.97945030332301,0],[7.076788615748477,43.9273918598639,0],[6.911768365155173,43.82642409081445,0],[6.856338867306366,43.73312212341578,0],[6.87457472063601,43.61041566504413,0],[6.947502596628324,43.48995013862463,0],[7.082599631286238,43.57306938552557,0],[7.248507134750355,43.66785706241089,0],[7.43396153479412,43.74418116821091,0],[7.593995593714253,43.78723831742843,0],[7.728907014878352,43.9496849086633,0]]

    niceCoords = fixCoords(niceCoords)

    let montpellierCoords = [[3.900054362825152,43.8028631857157,0],[3.610494489189264,43.85474508602393,0],[3.423712893536546,43.8734555363807,0],[3.197710882642653,43.768993769449,0],[3.126976898813738,43.61724629796171,0],[3.034442578406116,43.47278570371732,0],[2.871558959475649,43.45477942078495,0],[2.729946265858942,43.42036860975681,0],[2.655981962113789,43.26899261949684,0],[2.710416519065566,43.02236414960951,0],[2.661639387369437,42.81249854433613,0],[2.673988230960409,42.69970268415512,0],[2.60007856702839,42.53850754678941,0],[2.707166954053051,42.4323588944548,0],[2.85248918339629,42.4420393194991,0],[2.996707323885026,42.57963876673804,0],[3.063201460252822,42.6935283771386,0],[3.031972079434759,42.88731712888005,0],[3.181824168108756,43.17018730687063,0],[3.424019055456842,43.30037299944952,0],[3.517783429496155,43.28708497140547,0],[3.684232431499441,43.38579982518855,0],[3.897728746136846,43.49014829711507,0],[4.060677216484569,43.56058760319041,0],[3.900054362825152,43.8028631857157,0]]

    montpellierCoords = fixCoords(montpellierCoords);

    let northItalyCoords = [[10.47491847534511,43.29109330509323,0],[11.02537610815718,42.69468521188305,0],[11.67727502405389,42.23018584007769,0],[12.36441005262446,41.71065773067343,0],[13.18422007142802,41.29716662433009,0],[13.97135036369372,41.15098607692951,0],[15.90359498568846,41.5071846061925,0],[15.22576213374064,41.89325997526836,0],[14.15508005541978,42.4093457360935,0],[13.50756985424379,43.57414059909393,0],[12.48507706126834,44.16467750196121,0],[12.31491402666635,44.78956208764842,0],[12.30053534118039,45.38030494089046,0],[13.02620179645509,45.65513582556256,0],[13.61062935093564,45.43034493133884,0],[13.95067881528466,44.8372738987962,0],[14.5033341280739,45.2590692472062,0],[15.12230048545896,44.4561372682811,0],[15.98405962476884,43.63776151821698,0],[16.8689488864089,43.40399677105592,0],[18.03967091769521,42.78820446680773,0],[18.02217600260849,43.59096210607559,0],[16.73489269771385,44.17792105384653,0],[15.59706164604947,45.19851062000506,0],[15.00601185216334,45.8069503694194,0],[14.11287677118936,46.22834214572932,0],[12.79930132039095,46.19421530037331,0],[11.73148444979751,45.79217092948383,0],[10.92879613866277,45.30923371303822,0],[9.711060414058926,45.22447265479938,0],[8.511999378554213,45.10742158300505,0],[7.684838771452434,44.74902928382144,0],[6.85490929631812,44.24723711197407,0],[6.082807505714191,43.81388780555207,0],[5.444789524758525,43.75747975517125,0],[4.370663538464505,43.85749214944133,0],[3.269367285527285,43.73722944553597,0],[2.451460915393782,43.27695221570306,0],[1.793028248197976,42.42736348119004,0],[0.9784739303613277,41.84985076665276,0],[0.08133410828147225,42.13407456101215,0],[-0.7658658550412911,42.0832377908725,0],[-0.7569368811729782,41.10994420628414,0],[-0.8048813007862898,40.76611754339164,0],[-1.150775737704243,40.20185989297021,0],[-1.453061023065447,39.62586335884618,0],[-1.576726801038976,38.96346859212094,0],[-1.196314984477233,38.29467599480987,0],[-0.546308068652418,38.2634796169768,0],[0.1463072488470618,38.680441684397,0],[-0.2287536731066386,39.02121481992685,0],[-0.3011176232169399,39.61913081899183,0],[0.1129398446334728,40.19563461880249,0],[0.6261583731737197,40.57170275092213,0],[0.813190507663375,40.92963343749469,0],[1.997633596192825,41.28159894941191,0],[3.017411681248112,41.76164853811493,0],[3.173906877581514,42.19369949867897,0],[3.023456414571557,43.00482775786607,0],[3.679815798689363,43.45804542744619,0],[4.469651188347445,43.46661332602554,0],[5.472231353028951,43.26436493514147,0],[6.339617659252045,43.17154830683619,0],[7.236451911661195,43.67421557255307,0],[8.041094728753581,44.03057250797587,0],[8.787183930317308,44.41397880144933,0],[9.397674696959493,44.28256178015005,0],[10.05664662475233,44.04280393368234,0],[10.47491847534511,43.29109330509323,0]]

    northItalyCoords = fixCoords(northItalyCoords)

    let centralEuropeCoords = [[19.51237571534583,45.70154090075426,0],[19.00559021142124,46.37267409658932,0],[18.94479640237441,47.18846434715943,0],[19.60193950382921,47.82331794118399,0],[20.99900922950338,48.23000623746394,0],[22.68165020230604,48.15522238588826,0],[23.99595631623468,48.05418353742931,0],[24.80586328059556,48.52559411742541,0],[23.42679738517084,49.15357918529271,0],[23.86466546948914,49.96403824985695,0],[23.69651015270368,51.07320421661413,0],[21.68397806811606,51.67562740367407,0],[20.63232164991142,51.54469670875257,0],[19.73949968148057,50.80559510711647,0],[19.38037229060375,50.33522117469557,0],[18.48940964852606,49.59086673903074,0],[17.23466013835939,49.33968712913881,0],[15.81939910232179,49.28607402033642,0],[14.4405049386127,49.49025485201418,0],[13.55524184900068,50.11396933740442,0],[13.05734687452849,50.71668126881557,0],[10.95761423662126,50.9924395503169,0],[9.616616151705724,50.82833425496537,0],[9.159383958341431,50.14919034062113,0],[8.50025313980221,49.17678180256532,0],[8.272557258370362,48.39044433980204,0],[8.686457169716032,47.70391431187731,0],[10.10574537660439,48.05418397693247,0],[11.34003626002499,47.84893619758878,0],[12.00735965684037,47.49240442894207,0],[13.33535228434631,47.25517413884825,0],[15.01603828047898,47.41859399897223,0],[15.96169163195014,47.39878472888422,0],[17.08595531894161,47.21456848206905,0],[17.57452050917802,46.8016789780762,0],[17.54658514441568,46.32471011646599,0],[17.49033313721838,45.76628165730911,0],[17.58904206874303,45.37321558833727,0],[17.97987376301023,45.0030208844246,0],[18.64427693916396,44.92496036735061,0],[19.10835964927794,44.97736573317693,0],[19.51237571534583,45.70154090075426,0]]

    centralEuropeCoords = fixCoords(centralEuropeCoords);

    //some coords are taken from polygons drawn on google earth which are [long, lat] but leaflet uses [lat, long], this function handles this conversion
    function fixCoords(coords) {
      for (let i = 0; i < coords.length; i++) {
        let temp = coords[i][1];
        coords[i][1] = coords[i][0];
        coords[i][0] = temp;
      }
      return coords;
    }

    function addPolygon(coords, color, opacity) {
      // Create a polygon with no visible border
      let polygon = L.polygon(coords, {
        color: "transparent", // No visible border
        weight: 0, // No border thickness
        opacity: 0, // No border opacity
        fillColor: color, // Fill color
        fillOpacity: opacity, // Fill opacity
        smoothFactor: 4, // Smooth out the curve
      }).addTo(anfExpansionLayer);

      polygon.on("add", () => {
        setTimeout(() => {
          if (polygon._path) {
            polygon._path.classList.add("blurred-polygon");
          }
        }, 0);
      });
    }

    addPolygon(anfOriginCoords, "red", 0.8);
    addPolygon(nigdeCoords, "red", 0.8);
    addPolygon(southernAnatoliaCoords, "orange", 0.5);
    addPolygon(anatalyaCoords, "orange", 0.5);
    addPolygon(cyprusCoords, "red", 0.8);
    addPolygon(westAnatoliaCoords, "orange", 0.8);
    addPolygon(nafplionCoords, "orange", 0.8);
    addPolygon(balkanCoords, "yellow", 0.4);
    addPolygon(northwestAnatoliaCoords, "yellow", 0.8);
    addPolygon(creteCoords, "orange", 0.8);
    addPolygon(northItalyCoords, "rgb(94, 87, 160)", 0.5);
    addPolygon(albaniaCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(southItalyCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(sicilyCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(darkSardiniaCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(genoaCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(niceCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(montpellierCoords, "rgb(36, 28, 106)", 0.8)
    addPolygon(centralEuropeCoords, "rgb(94, 90, 6)", 0.8)

    /******************************************************/

    let ANFOriginCoords = [38.109904916253555, 37.56280292126914];
    let cyprus = [34.937300019663, 33.12242036505382];
    let crete = [35.231110035824535, 24.80451044415649];
    let bademdere = [37.91529817816538, 35.076834657380765];
    let kusadasi = [37.85638183728916, 27.290315419375275];
    let thessaloniki = [40.67467495371143, 22.894976499076776];
    let tirana = [41.334582276261884, 19.677275378989766];
    let cutro = [39.027030380708986, 16.885483724873207];
    let nafplion = [37.567760841027386, 22.98740570268659];
    let syvota = [39.55142338246975, 20.180992582746878];
    let rossano = [39.57185552491794, 16.643531035064285];
    let split = [43.519201932947865, 16.51378613302088];
    let paola = [39.34275024440744, 16.04286760094992];
    let latina = [41.43538325186495, 12.86778800709526];
    let ostia = [41.75491678543996, 12.274359485378756];
    let sardinia = [39.8677093953908, 9.047691232289715];
    let piombino = [42.969452702406, 10.525436595835794];
    let genoa = [44.46942144131711, 8.841474913224822];
    let frejus = [43.37954726509159, 6.604082213078283];
    let montpellier = [43.58487223384653, 3.8178397375090576];
    let girona = [42.40345722881095, 2.879939763110085];
    let valencia = [39.374613208102666, -0.534081545192991];
    let seville = [37.038532578492855, -5.206541501117564];
    let lisbon = [38.8665697002456, -8.923271011495029];
    let lesvans = [44.3901009211351, 4.117062995377118];
    let lemans = [48.23111664095748, 0.6421339818132111];
    let brittany = [48.55648532612354, -4.163733952892681];
    let southwales = [51.84800378764838, -4.8610559669437166];
    let lille = [50.60889068902996, 2.1498572554072446];
    let london = [51.344590583719764, 0.05789121325413622];
    let izmit = [40.68726386603334, 30.72121329075923];
    let northmacedonia = [42.05903556486896, 22.485274908559845];
    let serbia = [44.39314119869013, 20.7137000620518];
    let sofia = [42.69943560665004, 23.08836421800939];
    let craiova = [44.177273889432506, 23.80453277298072];
    let burgas = [42.657869532924906, 27.25344976139531];
    let babadag = [44.77473442415656, 28.849941790154233];
    let osiek = [45.52949591904141, 18.68940193957483];
    let austria = [47.61713200458379, 14.637853653202992];
    let linz = [48.583915311724475, 14.172928491228985];
    let ostrava = [49.90699335635247, 17.439098596615057];
    let anatalya = [37.040801521583184, 30.822048028480644];

    const plotANFExpansion = (from, to) => {
      // Plot the various paths of expansion taken by the Anatolian Neolithic Farmers into Europe
      let polyline = "";
      let opacity = 0.5;
      let weight = 8;
      let colour = "brown";

      // Function to calculate control point for the curve
      const getControlPoint = (from, to, curveStrength = 0.3) => {
        const latMid = (from[0] + to[0]) / 2;
        const lngMid = (from[1] + to[1]) / 2;
        const dx = to[1] - from[1];
        const dy = to[0] - from[0];
        const norm = Math.sqrt(dx * dx + dy * dy);
        const offsetLat = (-dy / norm) * curveStrength;
        const offsetLng = (dx / norm) * curveStrength;

        return [latMid + offsetLat, lngMid + offsetLng];
      };

      // Calculate control point for the curve
      const controlPoint = getControlPoint(from, to, 1.2); // Adjust the curve strength if needed

      // Create the curved polyline with control point
      polyline = L.curve(["M", from, "Q", controlPoint, to], {
        color: colour,
        weight: weight,
        opacity: opacity,
      }).addTo(anfExpansionLayer);

      // Calculate the angle for the arrow
      const angle =
        (Math.atan2(to[1] - from[1], to[0] - from[0]) * 180) / Math.PI;

      // Custom arrow icon with an outstretched triangle
      const arrowIcon = L.divIcon({
        className: "",
        html: `<svg width="30" height="30" viewBox="0 0 30 30" style="transform: rotate(${angle}deg);">
      <polygon points="15,0, 5,25 25,25" fill="${colour}" />
    </svg>`,
        iconSize: [30, 30],
        iconAnchor: [15, 15],
      });

      // Place the arrow at the end of the curved polyline
      L.marker(to, { icon: arrowIcon }).addTo(anfExpansionLayer);
    };

    plotANFExpansion(ANFOriginCoords, cyprus);
    plotANFExpansion(cyprus, crete);
    plotANFExpansion(crete, cutro);
    plotANFExpansion(crete, nafplion);
    plotANFExpansion(ANFOriginCoords, bademdere);
    plotANFExpansion(bademdere, anatalya);
    plotANFExpansion(anatalya, kusadasi);
    plotANFExpansion(bademdere, izmit);
    plotANFExpansion(kusadasi, thessaloniki);
    plotANFExpansion(thessaloniki, tirana);
    plotANFExpansion(nafplion, syvota);
    plotANFExpansion(syvota, rossano);
    plotANFExpansion(syvota, split);
    plotANFExpansion(paola, latina);
    plotANFExpansion(ostia, sardinia);
    plotANFExpansion(piombino, genoa);
    plotANFExpansion(genoa, frejus);
    plotANFExpansion(frejus, montpellier);
    plotANFExpansion(girona, valencia);
    plotANFExpansion(valencia, seville);
    plotANFExpansion(seville, lisbon);
    plotANFExpansion(lesvans, lemans);
    plotANFExpansion(brittany, southwales);
    plotANFExpansion(lille, london);
    plotANFExpansion(northmacedonia, serbia);
    plotANFExpansion(sofia, craiova);
    plotANFExpansion(burgas, babadag);
    plotANFExpansion(osiek, austria);
    plotANFExpansion(linz, ostrava);

    L.control
      .layers(
        null,
        { "Anatolian Neolithic Farmer Expansion": anfExpansionLayer },
        { collapsed: false }
      )
      .addTo(map);
  }, [map]);

  return (
    <div style={{ height: "100vh" }}>
      <div id="map" />
      <div style={{ marginTop: "10px" }}>
        {progress.total > 0 && (
          <p style={{ textAlign: "center" }}>
            {progress.current} of {progress.total} lines added.{" "}
            {((progress.current / progress.total) * 100).toFixed(2)}% Complete
          </p>
        )}
      </div>
    </div>
  );
};

export default FamilyMigrationMap;
